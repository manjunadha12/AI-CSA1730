import heapq
goal = [[1,2,3],[4,5,6],[7,8,0]]
def h(s):
    return sum(abs((v-1)//3 - i) + abs((v-1)%3 - j) for i,row in enumerate(s) for j,v in enumerate(row) if v)
def neighbors(s):
    x,y = next((i,j) for i in range(3) for j in range(3) if s[i][j]==0)
    for dx,dy in [(-1,0),(1,0),(0,-1),(0,1)]:
        nx,ny = x+dx,y+dy
        if 0<=nx<3 and 0<=ny<3:
            t = [r[:] for r in s]
            t[x][y],t[nx][ny]=t[nx][ny],t[x][y]
            yield t

def solvable(p):
    f = [v for row in p for v in row if v]
    inv = sum(f[i]>f[j] for i in range(len(f)) for j in range(i+1,len(f)))
    return inv%2==0

def solve(start):
    q = [(h(start),0,start,[])]
    seen = set()
    while q:
        _,g,s,path=heapq.heappop(q)
        if s==goal: return path+[s]
        seen.add(str(s))
        for n in neighbors(s):
            if str(n) not in seen:
                heapq.heappush(q,(g+1+h(n),g+1,n,path+[s]))
    return None

print("Enter 8-puzzle rows (3 numbers per row, 0 for blank):")
start = [list(map(int,input().split())) for _ in range(3)]

if not solvable(start):
    print("Unsolvable puzzle.")
else:
    steps = solve(start)
    if steps:
        for st in steps:
            for r in st: print(r)
            print("---")
    else:
        print("No solution found.")
