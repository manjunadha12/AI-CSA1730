from collections import deque

def is_valid(m, c): return 0 <= m <= 3 and 0 <= c <= 3 and (m == 0 or m >= c) and (3 - m == 0 or 3 - m >= 3 - c)

def get_moves(m, c, b):
    for dm, dc in [(1,0), (0,1), (2,0), (0,2), (1,1)]:
        nm, nc, nb = (m - dm, c - dc, 0) if b else (m + dm, c + dc, 1)
        if is_valid(nm, nc): yield (nm, nc, nb)

def bfs():
    start, goal = (3, 3, 1), (0, 0, 0)
    q, visited = deque([(start, [])]), {start}
    while q:
        state, path = q.popleft()
        if state == goal: return path + [state]
        for nxt in get_moves(*state):
            if nxt not in visited:
                visited.add(nxt)
                q.append((nxt, path + [state]))

for i, (m, c, b) in enumerate(bfs()):
    print(f"Step {i}: Missionaries={m}, Cannibals={c}, Boat={'Left' if b else 'Right'}")
